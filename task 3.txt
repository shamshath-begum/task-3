Task 3:

For the given JSON iterate over all for loops (for,for in ,for of, for Each)

To clarify, the JSON format does not inherently support iteration as it is a data interchange format. However, if you have a JavaScript object or an array derived from the JSON data, you can use different iteration constructs to traverse its properties or elements. Here's an example of how you can use different for loops in JavaScript to iterate over objects or arrays:

Assuming you have a JavaScript object or an array obtained from the provided JSON data, let's call it `jsonData`.

1. Using a `for` loop to iterate over array elements:

javascript
if (Array.isArray(jsonData)) {
  for (let i = 0; i < jsonData.length; i++) {
    const element = jsonData[i];
    // Perform actions with each element
    console.log(element);
  }
}


2. Using a `for...in` loop to iterate over object properties:

javascript
if (typeof jsonData === 'object' && !Array.isArray(jsonData)) {
  for (let key in jsonData) {
    if (jsonData.hasOwnProperty(key)) {
      const value = jsonData[key];
      // Perform actions with each property
      console.log(key, value);
    }
  }
}

3. Using a `for...of` loop to iterate over array elements or object values:

javascript
if (Array.isArray(jsonData)) {
  for (let element of jsonData) {
    // Perform actions with each element
    console.log(element);
  }
} else if (typeof jsonData === 'object' && !Array.isArray(jsonData)) {
  for (let value of Object.values(jsonData)) {
    // Perform actions with each value
    console.log(value);
  }
}


Note: `Object.values()` is used in the `for...of` loop for objects to extract the values of the properties.

4. Using the `forEach` method to iterate over array elements:

javascript
if (Array.isArray(jsonData)) {
  jsonData.forEach((element) => {
    // Perform actions with each element
    console.log(element);
  });
}

 The choice of loop depends on the specific structure and requirements of your data. Each loop construct has its own characteristics and is suitable for different scenarios.


Examples:

         FOR LOOP
  
for(i=0;i<3;i++)
{
console.log(guvi[i].name);
}
OUTPUT:shama
       abc
       xyz

        FOR IN LOOP


for(let key in guvi)
{
console.log(key,guvi[key]);
}

       
OUTPUT:0 { name: 'shama', tech: 'fsd', batch: 'B38WE' }
       1 { name: 'abc', tech: 'sc', batch: 'B38WD' }
       2 { name: 'xyz', tech: 'testing', batch: 'B39WD' }


       FOR OF LOOP

for(let n of guvi)
{
console.log(n);
}
  
OUTPUT:
{ name: 'shama', tech: 'fsd', batch: 'B38WE' }
{ name: 'abc', tech: 'sc', batch: 'B38WD' }
{ name: 'xyz', tech: 'testing', batch: 'B39WD' }
         

      FOR EACH LOOP

guvi.forEach((n)=>{
   console.log(n);
});

OUTPUT:
   { name: 'shama', tech: 'fsd', batch: 'B38WE' }
   { name: 'abc', tech: 'sc', batch: 'B38WD' }
   { name: 'xyz', tech: 'testing', batch: 'B39WD' }




2. Create your own resume data in JSON format


let RESUME={
    "NAME":"S SHAMSHATH BEGUM",
    "ADDRESS":{"No":12,"STREET":"VALLIMAL","DISTRICT":"TRICHY","MOBILE NO":9842393430,"E-MAIL ID":"shama29.b@gmail.com"},
    "isMARRIED":TRUE,
    "HOBBIES":NULL,
    "UG":"ECE",
    "YEAR":2000,
    "PERCENTAGE":"85%", 
    "COLLEGE":"JCE",
    "PG":"CSE",
    "YEAR":2004,
    "PERCENTAGE":"85%",
    "COLLEGE":"KBN",
    "EXPERIENCE":{
        "TEACHING":{
            "COLLEGE":{
                "NAME":"KBN",
                "YEARS":3,
            },
         TECHNICAL:{
            "NAME":"AZAMTECHNOLOGIES",
            "YEAR":1
         }   
        }
    }
}
console.log(RESUME);
